/*
* @Author: Administrator
* @Date:   2018-03-29 15:58:23
* @Last Modified by:   Administrator
* @Last Modified time: 2018-03-29 16:32:35
*/
// https://leetcode.com/problems/sum-of-two-integers/description/
/*
  解题思路：
  番茄时间(3个20分钟)
  1、由于不可以采用“+”、“-”符号，所以可以使用按位操作符来解题
  2、需要将计算的数字转换为二进制进行运算。二进制的加法是逢2进1，如果两个基数分别是0和1，那么这个位上的基数就是1；如果两个基数都是1，那么这个位上的基数是0；如果两个基数都是0，那么这个位上的基数是0；只有不相等的基数该位的基数才会是1，这种方法类似与异或运算 a ^ b；但是直接使用异或运算不可行，二进制是逢2进1。直接使用异或运算得到的是0，这种情况下可以使用左移运算 01 + 01 = 10，左进一位(相当于乘与2)，（左移运算公式 x * 2^y次方：）(a & b) << 1
 */
var getSum = function (a, b) {
  var s = (a ^ b) + ((a & b) << 1)
  return s
}

console.log(getSum(1, 3))

/*
example：
getSum(15, 9) = 24
15的二进制： 1111
9的二进制： 1001
15 ^ 9 即 1111 ^ 1001
1111
1001
————
0110

异或运算结果为110(即6)

15 & 9
1111
1001
————
1001

按位与运算结果为1001(即9)
再执行左位移运算（运算公式：x * 2^y次方），向左进一位
9 * 2的1次方 = 18

最后 6 + 18 = 24
 */